--------
toc: Table of contents
--------

    toc         | Table of contents
    todos       | TODOs
    road-map    | Road map
    dev-notes   | Dev notes
    misc-notes  | Misc notes
    other-tools | Other tools

--------
todos: TODOs
--------

Editing pass:

    - src/mvs/cli.py
    - src/mvs/plan.py
    x src/mvs/problems.py
    x src/mvs/__init__.py
    x src/mvs/constants.py
    x src/mvs/filesys.py
    x src/mvs/messages.py
    x src/mvs/optconfig.py
    x src/mvs/renaming.py
    x src/mvs/utils.py
    x src/mvs/version.py

    - tests/conftest.py
    - tests/test_cli.py
    - tests/test_plan.py
    x tests/__init__.py
    x tests/editor.py
    x tests/empty_pager.py
    x tests/failer.py
    x tests/test_problems.py
    x tests/test_renaming.py
    x tests/test_utils.py

    - CHANGES.md
    - README.md
    - misc/notes.txt
    x LICENSE
    x requirements.txt
    x setup.py
    x tags
    x tasks.py
    x tox.ini

tasks.py: bump:

    - Set version tag

    - Retroactively set this tag:

        v1.0.0
        f5019972d33e6ea0ea4f418bfac0d03427e744fb

Publish with major version bump.

--------
road-map: Road map
--------

Clipboard source test disabled for Linux: revive if possible.

Support sym-link renames.

New inputs options: delimiters and stripping [see INPUT_OPTS].

Logging operations: list, prune, undo prior rename.

Additional failure control: backup [see CONTROL_BACKUP].

Alternative dryrun output styles [see DRYRUN_OUTPUTS].

Convenience renaming operations [see CONVENIENCE_OPS].

Other operations: copy, link, chmod, times, touch [see OTHER_OPS].

--------
dev-notes: Dev notes
--------

Creating a new virtualenv:

    v='3.9.4'
    deactivate
    pyenv shell $v && pyenv versions
    mkvirtualenv mvs-$v
    pip install -U pip
    pip install -e .[dev,test] && pip list

Activate and run tests:

    - Basic:

        workon mvs-3.9.4
        pytest -s -v tests/

        # Also confirm that mvs --stdin work when needing user confirmation.
        tests/stdin-check

    - With invoke:

        inv test
        inv tox

    - With tox directly:

        pyenv shell 3.9.4  3.8.9  ...
        tox

Version bump:

    - Edit/commit all changes, including CHANGES and README.

    inv bump --kind major|minor|patch

Publish:

    inv dist [--publish] [--test]

Installing from test pypi:

    pip install --index-url https://test.pypi.org/simple/ mvs

Tag file creation:

    inv tags

--------
misc-notes: Misc notes
--------

Why problem control was overhauled, yet again:

    - Previous approach:

        - The previous problem-control system started with an opinionated
          set of defaults regarding how to handle each type of problem: some
          were fatal (eventually getting the explicit halt control) and others
          simply excluded the affected renamings (skip).

        - To achieve a renaming that might require more active measures (create
          a new parent, clobber an existing file, or collide with another new
          path), the user must understand the problem control system and
          vocabulary.

        - As more flavors of problems have been discovered (same, recase, and
          the different variants of clobber and collide), that system has grown
          too complex.

        - The rest of these notes describe a better alternative. [NOTE: The new
          approach was implemented and is now the current approach, but most of
          the language here is still framed as though the changes are in the
          future.]

    - Use --skip rather than --controls:

        - Drop the opinionated defaults. Instead, embrace the philosophy of
          informed consent.

            - In other words, have a bias toward implementing the user's
              requested renaming.

            - And take effective action to warn the user before problematic
              operations occur (create, clobber, collide).

        - The first step is to re-assess the problem controls. They come in
          three varieties:

            1. Side effects that make a renaming possible: create and clobber.

            2. Excluding problematic renamings while others proceed: skip.

            3. Stopping the renaming plan before it starts: halt.

        - If mvs shifts to the informed consent model, the need for two of
          those control varieties disappears:

            - The user never needs to ask for create or clobber, because the
              library will simply do them when necessary and allowed.

            - The user never needs to ask for the halt control, because they
              can achieve the same outcome during user confirmation: say no.

        - If the default is to perform the renamings that the user requests and
          confirms, only one control is needed: the ability skip renamings
          having problems.

            --skip PROB [PROB...]

    - Group related problems:

        - As the library has discovered new problem varieties, the number of
          problems has become too large and subtle for most user needs.

        - To eliminate that proliferation and complexity, organize the problems
          into two broad categories (unresolvable and resolvable). Each problem
          will have a general name as well as an optional variety.

            - Unresolvable:

                noop      | equal, same, recase
                duplicate | .
                missing   | .
                type      | .
                code      | rename, filter
                exists    | other

            - Resolvable:

                parent   | .
                exists   | diff, full
                collides | diff, full

    - Store the full inventory of Renaming instances:

        - Early implementations did not preserve the full inventory of
          Renaming instances created initially from the user's inputs.

        - For example, renamings filtered out by user code were just
          tossed aside.

        - To make listings more informative, among other reasons, keeping a
          full inventory makes sense.

            self.filtered | Filtered out by user code.
            self.skipped  | Resolvable problem, but user wants to skip the renaming.
            self.excluded | Unresolvable problem.
            self.active   | Active renamings.

    - Confirmation behavior and --strict:

        - By default, the user must confirm in the normal way, either via a
          "yes" reply or the --yes option.

        - User can add an extra layer of safety with --strict.

            --strict CATEGORY...  # excluded|parent|exists|collides
            --strict all

        - It halts the renaming plan if any renamings have problems in the
          named categories.

        - A --strict=all setting asserts that renamings will have no more
          problems that those pre-declared. The plan can proceed only if:

            - There were no unresolvable problems.

            - The active renamings have no problems (either because there were
              none to begin with or because the user explicitly skipped them).

    - The informed consent model depends on useful listings:

        - By default:

            - A summary table of counts is shown unless all renamings are
              active and OK.

            - Among the categories configured to appear, the non-empty ones are
              listed.

        - User can request a narrowed set of categories, if desired:

            --list CATEGORY...  # filtered|skipped|excluded|parent|exists|collides|ok
            --list all          # The default.

Scenario to exercise CLI listing behavior:

    # Scenario in empty directory.
    ln -s foo bar && touch a d e f g h i ii j jj n
    mvs --dryrun --pager '' --filter 'return "k" not in o' --skip collides --pairs a b  c c  d xx/d  e x  f m g m  h xx/h  i ii  j jj  k1 kk1 k2 kk2 n nn

Why runtime user-code problems are treated as unresolvable:

    - In theory, one could forge ahead with a renaming even in the face of a
      runtime failure of the user's filtering and renaming code.

        - Verdict: doable, but not worth the trouble right now. Easy enough to
          add later.

        - Seem notes below for some of the issues and possible solutions.

    - Filter problem:

        - We could assume that the renaming should be either retained or
          filtered out.

        - Picking the right default is not clear cut. I would lean in the
          direction retaining renamings with a runtime filter problem.

Other operations: copy, link, chmod, times, touch [OTHER_OPS]:
    - copy: given old-paths, copy them to new-paths.
    - link: given old-paths (sources), create new-paths (links, soft or hard) pointing to old-paths.
    - chmod: given old-paths, apply "new-path" chmod-specs to old-paths.
    - times: given old-paths, apply "new-path" time-specs to old-paths.
    - touch: given old-paths, touch them.

Additional failure control: backup [CONTROL_BACKUP]:
    - Before clobber, backup the target (foo => foo.bak).
    - Which really just adds a supplement renaming.

New inputs options: delimiters and stripping [INPUT_OPTS]:
    --row-delimiter [default: tab]
    --path-delimiter [default: newline]
    --no-strip [default: paths are stripped]

Alternative dryrun output styles [DRYRUN_OUTPUTS]:
    - Like input structures: flat, paragraphs, pairs, rows
    - Plus JSON.
    - Or maybe just JSON.

Convenience renaming operations [CONVENIENCE_OPS]:

    - Evaluate these ideas and make plan (or drop).

    - In the classic rename script, these were call "rules". Multiple could be
      applied via command-line options and parameters. I think they were
      executed in order.

    - The rule I used almost exclusively:

        --expr PERLCODE

    - But note that classic rename usage looked more like this, where the
      PERLCODE was the first positional argument and the other positionals were
      orignal paths:

        rename PERLCODE PATH...

    - Most performed common string changes. Here are the long options on
      the `rename` installed on my MacOS. The classic rename scripts
      from the past were different.

        --append SUFFIX
        --prepend PREFIX
        --lower-case
        --upper-case
        --pipe COMMAND       # Pipe orig path to COMMAND; output becomes new path
        --subst FROM TO      # Text substitution, once per orig path.
        --subst-all FROM TO  # Same, but potentially multiple times per orig path.
        --remove-extension
        --keep-extension     # Remove ext; apply all other rules; then append ext.
        --camelcase          # Capitalize every word in the orig path.
        --urlesc             # Decode URL-escaped orig path.
        --nows               # Replace whitespace sequences with a single underscore.
        --rews               # Replace each underscore with single space.
        --noctrl             # Replace control char sequences with single underscore.
        --nometa             # Replace each shell meta-character with underscore.
        --trim               # Remove whitespace and underscores from ends of orig path.

The purpose of the --paragraphs structure:

    - It does not provide any user flexibility.

    - Rather, it applies an extra component of strictness to the input parsing.

    - The paragraphs structure is the same as flat, plus the additional
      requirement that at least one blank existings between the original and
      new paths.

How --edit and --rename interact:

    - The steps go like this:

        - Read input paths from source.
        - Write paths to temp file.
        - Edit temp file.
        - Read input paths from temp file (orig paths and new paths).
        - Parse.
        - Then proceed with rest of renaming plan, including --rename.

Policy regarding new parents:

    - If user requests parent-affecting rename, what is intended?

        foo/bar.txt => FOO/bar-new.txt

    - Does user want to create FOO or rename foo to FOO?

        - If create is intended, it would work only on the case-sensistive
          systems that allow foo and FOO to coexist.

        - If rename is intended, that would affect the unlisted siblings of the
          original path.

            - That seems like a significant operation to infer with certaintly
              from a file rename request.

            - By contrast, an explicitly requested directory rename is known to
              affect all of its contents. But contents and siblings are
              different.

    - Policy to avoid that complexity and ambiguity:

        - Parents can be created but not renamed.

    - How mvs would behave in the current example:

        OS case-sensitive | Action
        -----------------------------------------------
        Yes               | Create missing FOO
        No                | Do nothing since FOO exists

        - In other words, create parent only if the user requests it and if the
          file system says the parent is missing.

Why I dropped the fake file system:

    - Path renaming is too complex to test well via a fake:

        - There are many complications, varying by OS, with renaming alone.

        - The number of file system operations is already non-trivial and, in
          future changes, I might add others.

    - I decided to mitigate the complexity in three ways:

        - Stricter policy about supported file types.
        - Stricter policy about clobbering.
        - Commit to writing real tests with actual renaming.

Checking for the existence of Renaming.new:

    - Start with some simplifying assumptions:

        - rn.orig exists: this problem is handled in a separate problem check.

        - rn.orig and rn.new are equal: we can handle this at the outset of the
          check_new_exists().

        - rn.new exists in some sense: if it does not, the situation is simple
          and we can rename freely. Handle this check at the outset.

        - The file system is case-preserving. This type of system involves the
          most complexity. Case-sensistive and case-insensitive systems have
          much simpler logic to determine whether clobbering would occur.
          Handle the latter at the outset.

    - Classification table for case-preserving systems, given the assumptions:

        - Columns:
            - Do rn.orig and rn.new have the same parents: will renaming require re-locate?
            - Does file-name casing of rn.new already agree with a file that exists on file system?
            - What type of change did the user request for the file-name portion?

        - Table:

            Re-locate | NameAgrees | NameChange | Notes
            ---------------------------------------------------------------------
            Yes       | No         | re-name    | #1 Clobber differently-cased name.
            "         | "          | re-case    | #2 "
            "         | "          | .          | #3 "
            "         | Yes        | re-name    | #4 Clobber.
            "         | "          | re-case    | #5 "
            "         | "          | .          | #6 "
            No        | No         | re-name    | #7 Clobber differently-cased name.
            "         | "          | re-case    | #8 Case-change-only renaming (self clobber).
            "         | "          | .          | #9 Problem(same).
            "         | Yes        | re-name    | #10 Clobber.
            "         | "          | re-case    | #11 Problem(recase).
            "         | "          | .          | #12 Problem(same).

        Examples for each table row:

            Path | re-name     | re-case     | noop
            ================================================
            orig | foo/xyz #1  | foo/xyz #2  | foo/xyz #3
            new  | BAR/xy      | BAR/XYz     | BAR/xyz
            fsys | BAR/xY      | BAR/xyZ     | BAR/xyZ
            ------------------------------------------------
            orig | foo/xyz #4  | foo/xyZ #5  | foo/xyz #6
            new  | BAR/xy      | BAR/xyz     | BAR/xyz
            fsys | BAR/xy      | BAR/xyz     | BAR/xyz
            ================================================
            orig | foo/xyz #7  | foo/xyz #8  | foo/xyz #9
            new  | foo/xy      | foo/XYZ     | FOO/xyz
            fsys | foo/xY      | foo/xyz     | foo/xyZ
            ------------------------------------------------
            orig | foo/xyz #10 | foo/xyZ #11 | FOO/xyz #12
            new  | foo/xy      | foo/xyz     | foo/xyz
            fsys | foo/xy      | foo/xyz     | foo/xyz

Why determine the clobber delete-operation in real-time:

    - Before a clobber-renaming we must first delete the existing path at
      rn.new.

    - The deletion is needed to avoid inheriting casing on case-preserving
      systems and because the Python renaming functions won't handle the
      clobbering for us (it varies by operating system and by the type of the
      clobbering victim). It's simpler to delete first rather than attempting
      to clobber-via-renaming.

    - To delete, you need to determine the correct delete-operation:
      file, empty-directory, or full-directory.

    - Determining that operation based on the type of rn.orig or rn.new is
      flawed in the face of multiple renamings (of different types) colliding
      on the same new path. For example:

        Initial paths: a/ b c x/

        orig | new | rn.orig | rn.new
        -----------------------------
        a/   | x/  | ok      | ok
        b    | x   | fails   | ok
        c    | x   | ok      | fails

    - One could try to reason through the clobbering chain implied by the
      renamings to select the delete-operation [too complex and fraught], or
      check the path-type of each rn.new that needs clobbering [probably the
      simplest approach to implement], or just try each approach in a
      reasonable order [eg, starting with the path-type of rn.new]

Thinking behind Renaming instances having only a single problem:

    - If a problem occurs either (a) the user requested a solution (via create
      or clobber), thus making the issue non-problematic or (b) the rn ends up
      in plan.skipped or plan.halts and no further problem-checks occur for it.

    - The checks are arranged so that more funamental checks occur before
      checks that have built-in assumptions: for example, PN.equal (user did
      not request renaming) before PN.missing (renaming is impossible) before
      PN.exists (renaming looks risky).

    - Within each check, problems are prioritized: for example, when checking
      whether rn.new exists, we return a PN.exists_full before less-severe
      existence-related problems.

    - Thus a Renaming instance ends up having zero or one problems after the
      checks -- namely, the most severe or logically-prior problem rather than
      a full accounting of every problem that it could be diagnosed with.

    - Storing all diagnosed problems would make the reporting logic more
      complex and it might also require the user to apply more problem controls
      to achieve an outcome.

--------
other-tools: Other tools
--------

CLI tools:

  - rename

    - http://search.cpan.org/~pederst/rename-1.9/bin/rename.PL

    - Classic Perl renaming utility by Larry Wall, subsequently maintained
      (perhaps with minor enhancements) by others.

    - The core concept was to use a Perl expression to convert ORIG names to
      NEW names.

  - brn

    - http://search.cpan.org/~swestrup/App-FileTools-BulkRename-0.07/bin/brn

    - Enhancement of the Perl rename tool.

  - perlmv

    - http://search.cpan.org/dist/App-perlmv/bin/perlmv

    - Enhancement of the Perl rename tool.

    - Scriptlets directory where a user could store small bits of renaming
      logic. On the command-line, these common scenarios could be referenced by
      name.

  - pmv

    - http://search.cpan.org/~jv/File-PerlMove-0.06/script/pmv

    - Enhancement of the Perl rename tool.

  - renameutils

    - http://www.nongnu.org/renameutils/

    - Editor mode: open candidate renamings in text file; user edits and quits;
      then renaming occurs.

  - mmv

    - Unix mass move tool. Fairly basic.

    - Very little information available aside from some archived man pages.

  - rnm

    - https://github.com/neurobin/rnm

    - Many features, but nothing I haven't covered already.

    - A long and cryptic set of options, codes, and terminology.


GUI tools and OS-specific tools:

  - pyrenamer

    - https://github.com/SteveRyherd/pyRenamer

  - gprename

    - https://en.wikipedia.org/wiki/GPRename

  - krename

    - http://www.krename.net/home/

  - Metamorphose

    - https://github.com/metamorphose/metamorphose2

